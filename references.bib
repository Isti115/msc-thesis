@article{hoare-logic,
author = {Hoare, C. A. R.},
title = {An Axiomatic Basis for Computer Programming},
year = {1969},
issue_date = {October 1969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/363235.363259},
doi = {10.1145/363235.363259},
journal = {Commun. ACM},
month = oct,
pages = {576–580},
numpages = {5},
keywords = {axiomatic method, machine-independent programming, formal language definition, theory of programming’ proofs of programs, programming language design, program documentation}
}

@Article{Lamport1980,
author="Lamport, Leslie",
title="The `Hoare logic' of concurrent programs",
journal="Acta Informatica",
year="1980",
month="Jun",
day="01",
volume="14",
number="1",
pages="21--37",
abstract="Hoare's logical system for specifying and proving partial correctness properties of sequential programs is generalized to concurrent programs. The basic idea is to define the assertion {\{}P{\}} S {\{}Q{\}} to mean that if execution is begun anywhere in S with P true, then P will remain true until S terminates, and Q will be true if and when S terminates. The predicates P and Q may depend upon program control locations as well as upon the values of variables. A system of inference rules and axiom schemas is given, and a formal correctness proof for a simple program is outlined. We show that by specifying certain requirements for the unimplemented parts, correctness properties can be proved without completely implementing the program. The relation to Pnueli's temporal logic formalism is also discussed.",
issn="1432-0525",
doi="10.1007/BF00289062",
url="https://doi.org/10.1007/BF00289062"
}


@Article{hons_1202,
author="Candy, Robin",
title="Towards Concurrent Hoare Logic",
year="2012",
month="Nov",
day="02",
abstract="How can we rigorously prove that an algorithm does what we think it does? Logically verifying programs is very important to industry. Floyd-Hoare Logic (or Hoare Logic for short) is a set of rules that describe a type of valid reasoning for sequential program verification. Many different attempts have been made to extend Hoare Logic for concurrent program verification. We combine ideas from a few of these extensions to formalise a veriﬁcation framework for specific classes of parallel programs. A new proof rule to deal with the semantics of mesh algorithms is proposed within the verification framework. We use the framework and mesh proof rule to verify the correctness of Sung Bae’s parallel algorithm for the maximum subarray problem.",
url="https://ir.canterbury.ac.nz/handle/10092/14861"
}

@article{Brady2013IdrisAG,
  title={Idris, a general-purpose dependently typed programming language: Design and implementation},
  author={Edwin Brady},
  journal={J. Funct. Program.},
  year={2013},
  volume={23},
  pages={552-593}
}

@phdthesis{norell:thesis,
  author  = {Ulf Norell},
  title	  = {Towards a practical programming language based on dependent type
	     theory},
  school  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  year	  = 2007,
  month	  = {September},
  address = {SE-412 96 G\"{o}teborg, Sweden}
}

@inproceedings{Chandy1988ParallelPD,
  title={Parallel program design - a foundation},
  author={K. Mani Chandy and Jayadev Misra},
  year={1988}
}

@article{proving-parallel-assertions,
author = {Ashcroft, E. A.},
title = {Proving Assertions about Parallel Programs},
year = {1975},
issue_date = {February 1975},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {10},
number = {1},
issn = {0022-0000},
url = {https://doi.org/10.1016/S0022-0000(75)80018-3},
doi = {10.1016/S0022-0000(75)80018-3},
journal = {J. Comput. Syst. Sci.},
month = feb,
pages = {110–135},
numpages = {26}
}

@article{coq-concurrent-verification-case-study,
  title={Verification of Concurrent Programs Using the Coq Proof Assistant: A Case Study},
  author={Reynald Affeldt and Naoki Kobayashi and Akinori Yonezawa},
  journal={IPSJ Digital Courier},
  volume={1},
  number={ },
  pages={117-127},
  year={2005},
  doi={10.2197/ipsjdc.1.117}
}

@article{AFFELDT200817,
title = "A Coq Library for Verification of Concurrent Programs",
journal = "Electronic Notes in Theoretical Computer Science",
volume = "199",
pages = "17 - 32",
year = "2008",
note = "Proceedings of the Fourth International Workshop on Logical Frameworks and Meta-Languages (LFM 2004)",
issn = "1571-0661",
doi = "https://doi.org/10.1016/j.entcs.2007.11.010",
url = "http://www.sciencedirect.com/science/article/pii/S1571066108000765",
author = "Reynald Affeldt and Naoki Kobayashi",
keywords = "Proof assistant, Coq, concurrent programs, pi-calculus",
abstract = "Thanks to recent advances, modern proof assistants now enable verification of realistic sequential programs. However, regarding the concurrency paradigm, previous work essentially focused on formalization of abstract systems, such as pure concurrent calculi, which are too minimal to be realistic. In this paper, we propose a library that enables verification of realistic concurrent programs in the Coq proof assistant. Our approach is based on an extension of the π-calculus whose encoding enables such programs to be modeled conveniently. This encoding is coupled with a specification language akin to spatial logics, including in particular a notion of fairness, which is important to write satisfactory specifications for realistic concurrent programs. In order to facilitate formal proof, we propose a collection of lemmas that can be reused in the context of different verifications. Among these lemmas, the most effective for simplifying the proof task take advantage of confluence properties. In order to evaluate feasibility of verification of concurrent programs using this library, we perform verification for a non-trivial application."
}

@book{hz-orsi,
author = "Fóthi, Ákos and Horváth, Zoltán",
title = "Párhuzamos és elosztott programozás {(English: Parallel and Distributed Programming)}",
publisher = "ELTE",
year = "2005"
}

@article{hz-article,
author = "Horváth, Zoltán",
title = "Párhuzamos programozás reláció alapú modellje {(English: Relational Model of Parallel Programming)}",
year = "1996"
}

@InProceedings{coq-mail-server,
author="Affeldt, Reynald
and Kobayashi, Naoki",
editor="Okada, Mitsuhiro
and Pierce, Benjamin C.
and Scedrov, Andre
and Tokuda, Hideyuki
and Yonezawa, Akinori",
title="Formalization and Verification of a Mail Server in Coq",
booktitle="Software Security --- Theories and Systems",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="217--233",
abstract="This paper reports on the formalization and verification of a mail server (SMTP server) in Coq. The correctness of a mail server is very important: bugs of the mail server may be abused for eavesdropping mail contents, spreading virus, sending spam messages, etc. We have verified a part of a mail server written in Java, by manually translating the Java program into a Coq function as faithfully as possible, and verifying properties of the Coq function. The results of this experiment indicate the feasibility and usefulness of verification of middle-sized system softwares in this style. The verification has been carried out in a few months, and a few bugs in the mail server have been indeed found during the verification process.",
isbn="978-3-540-36532-7"
}

@book{fothi-prog,
author="Fóthi, Ákos",
title="Bevezetés a programozáshoz {(English: Introduction to programming)}",
publisher = "ELTE",
year="1983"
}

@incollection{hoare1978proof,
  title={Proof of correctness of data representations},
  author={Hoare, Charles Antony Richard},
  booktitle={Programming methodology},
  pages={269--281},
  year={1978},
  publisher={Springer}
}

@inproceedings{emerson1988branching,
  title={Branching time temporal logic},
  author={Emerson, E Allen and Srinivasan, Jai},
  booktitle={Workshop/School/Symposium of the REX Project (Research and Education in Concurrent Systems)},
  pages={123--172},
  year={1988},
  organization={Springer}
}

@article{formalsemantics-typesystems,
  title = {Interactive Teaching of Programming Language Theory with a Proof Assistant},
  author = {Horpácsi, Dániel and Bereczky, Péter and Donkó, István and Kaposi, Ambrus and Németh, Dávid János},
  journal = {Central-European Journal of New Technologies in Research, Education and Practice},
  year = {2020}
}

@article{turing-lecture,
  title={Lecture to the London Mathematical Society on 20 february 1947},
  author={Turing, Alan M}
}

@software{the_coq_development_team_2020_3744225,
  author       = {The Coq Development Team},
  title        = {The Coq Proof Assistant, version 8.11.0},
  month        = jan,
  year         = 2020,
  publisher    = {Zenodo},
  version      = {8.11.0},
  doi          = {10.5281/zenodo.3744225},
  url          = {https://doi.org/10.5281/zenodo.3744225}
}

@Manual{Coq,
  title =        {The Coq proof assistant reference manual},
  author =       {The Coq development team},
  organization = {LogiCal Project},
  note =         {Version 8.0},
  year =         {2004},
  url =          "http://coq.inria.fr"
}

@misc{agda-stdlib,
    author       = {Danielsson, Nils Anders and Daggitt, Matthew and Allais, Guillaume},
    title        = {The {Agda} standard library},
    version      = {1.4},
    url          = {https://github.com/agda/agda-stdlib}
}

@inproceedings{Bergsten2017MethodsFU,
  title={Methods for using {Agda} to prove Safety and Liveness for Concurrent Programs},
  author={Erik Bergsten and Oskar Bj{\"a}rne Larsson and Tobias Rastemo and Oskar Rutqvist and Anderas Standar},
  year={2017}
}

@inproceedings{Complx-Isabelle,
author = {Amani, Sidney and Andronick, June and Bortin, Maksym and Lewis, Corey and Rizkallah, Christine and Tuong, Joseph},
title = {Complx: A Verification Framework for Concurrent Imperative Programs},
year = {2017},
isbn = {9781450347051},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3018610.3018627},
doi = {10.1145/3018610.3018627},
booktitle = {Proceedings of the 6th ACM SIGPLAN Conference on Certified Programs and Proofs},
pages = {138–150},
numpages = {13},
keywords = {imperative code, concurrency, Isabelle/HOL, programming languages, formal verification, Owicki-Gries},
location = {Paris, France},
series = {CPP 2017}
}

@software{agda,
  author = {{Agda Development Team}},
  title = {Agda},
  url = {https://github.com/agda/agda},
  version = {2.6.1}
}

@article{owicki1982proving,
  title={Proving liveness properties of concurrent programs},
  author={Owicki, Susan and Lamport, Leslie},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={4},
  number={3},
  pages={455--495},
  year={1982},
  publisher={ACM New York, NY, USA}
}

@inproceedings{Johan2018ProofCF,
  title={Proof Checker for Extended Linear Time Temporal Logic Proofs About Small Concurrent Programs},
  author={H{\"a}ggstr{\"o}m Johan},
  year={2018}
}

@incollection{misra1989foundation,
  title={A foundation of parallel programming},
  author={Misra, Jayadev},
  booktitle={Constructive Methods in Computing Science},
  pages={397--445},
  year={1989},
  publisher={Springer}
}

@article{fothi1988mathematical,
  title={A mathematical approach to programming},
  _author={F{\'o}thi, {\'A}KOS},
  author={Fóthi, Ákos},
  journal={Annales Uni. Sci. Budapest de R. E{\"o}tv{\"o}s Nom. Sectio Computatorica},
  volume={9},
  pages={105--114},
  year={1988}
}

@inproceedings{bove2009brief,
  title={A brief overview of Agda--a functional language with dependent types},
  author={Bove, Ana and Dybjer, Peter and Norell, Ulf},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={73--78},
  year={2009},
  organization={Springer}
}

@inproceedings{norell2008dependently,
  title={Dependently typed programming in Agda},
  author={Norell, Ulf},
  booktitle={International school on advanced functional programming},
  pages={230--266},
  year={2008},
  organization={Springer}
}

@phdthesis{simpl-schirmer2006verification,
  title={Verification of sequential imperative programs in Isabelle/HOL},
  author={Schirmer, Norbert},
  year={2006},
  school={Technische Universit{\"a}t M{\"u}nchen}
}

@phdthesis{hoare-parallel-nieto2002verification,
  title={Verification of parallel programs with the Owicki-Gries and rely-guarantee methods in Isabelle/HOL},
  author={Nieto, Prensa and others},
  year={2002},
  school={Technische Universit{\"a}t M{\"u}nchen}
}

@article{owicki1976axiomatic,
  title={An axiomatic proof technique for parallel programs I},
  author={Owicki, Susan and Gries, David},
  journal={Acta informatica},
  volume={6},
  number={4},
  pages={319--340},
  year={1976},
  publisher={Springer}
}

@book{nipkow2002isabelle,
  title={Isabelle/HOL: a proof assistant for higher-order logic},
  author={Nipkow, Tobias and Paulson, Lawrence C and Wenzel, Markus},
  volume={2283},
  year={2002},
  publisher={Springer Science \& Business Media}
}

@book{sangiorgi2003pi,
  title={The pi-calculus: a Theory of Mobile Processes},
  author={Sangiorgi, Davide and Walker, David},
  year={2003},
  publisher={Cambridge university press}
}

@article{pi-calculus-Milner1992ACO,
  title={A Calculus of Mobile Processes, I},
  author={Robin Milner and Joachim Parrow and David Walker},
  journal={Inf. Comput.},
  year={1992},
  volume={100},
  pages={1-40}
}

@article{MILNER19921,
title = "A calculus of mobile processes, I",
journal = "Information and Computation",
volume = "100",
number = "1",
pages = "1 - 40",
year = "1992",
issn = "0890-5401",
doi = "https://doi.org/10.1016/0890-5401(92)90008-4",
url = "http://www.sciencedirect.com/science/article/pii/0890540192900084",
author = "Robin Milner and Joachim Parrow and David Walker",
abstract = "We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed."
}

@article{MILNER199241,
title = "A calculus of mobile processes, II",
journal = "Information and Computation",
volume = "100",
number = "1",
pages = "41 - 77",
year = "1992",
issn = "0890-5401",
doi = "https://doi.org/10.1016/0890-5401(92)90009-5",
url = "http://www.sciencedirect.com/science/article/pii/0890540192900095",
author = "Robin Milner and Joachim Parrow and David Walker",
abstract = "This is the second of two papers in which we present the π-calculus, a calculus of mobile processes. We provide a detailed presentation of some of the theory of the calculus developed to date, and in particular we establish most of the results stated in the companion paper."
}

@inproceedings{Mauw1991APA,
  title={A Proof Assistant for PSF},
  author={Sjouke Mauw and Gert J. Veltink},
  booktitle={CAV},
  year={1991}
}

@misc{orsi-formalization-github,
    author       = {Donkó, István and Kaposi, Ambrus and Tóth, Melinda},
    title        = {An {Agda} formalization for a model of concurrent programs},
    url          = {https://github.com/Isti115/orsi-formalization}
}
